#
# MAPBASE SOURCE 2013 CI
#
# This workflow script automatically builds the Source SDK 2013 codebase on Windows and Linux using GitHub Actions.
#
# This is useful in a number of ways:
#
#     1. It ensures pull requests compile correctly on multiple platforms and provides binaries that can be used to test them.
#     2. It can be used to compile code for releases without having to pull and prepare a local development environment.
#     3. It opens potential for scripts that can employ more principles of CI/CD. (e.g. automatically publishing a release)
#
# This is based on a workflow originally created by z33ky.

name: Build Projects

on:
  workflow_call:
    inputs:
      configuration:
        description: 'Which configuration to build with'
        default: 'Release'
        required: true
        type: string
      branch:
        description: 'Which Source 2013 engine branch to compile for'
        default: 'sp'
        required: true
        type: string
      game:
        description: 'The name of the game to build (if relevant)'
        default: 'episodic'
        required: false
        type: string
      project-group:
        description: 'Which group of projects to compile'
        required: true
        type: string
      solution-name:
        description: 'The name of the solution/makefile'
        required: true
        type: string
      build-on-linux:
        description: 'Build on Ubuntu/Linux?'
        default: true
        required: false
        type: boolean

jobs:
  build_windows:
    name: Windows (VS2022)
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Add MSBuild to PATH
      uses: compnerd/gha-setup-vsdevenv@v6

    - name: Enable VS2022
      working-directory: '${{inputs.branch}}/src/vpc_scripts'
      shell: bash
      run: sed -i 's/^\($Conditional[ 	]\+VS2022[ 	]\+\).*/\1"1"/' newer_vs_toolsets.vpc

    - name: Pick game
      if: inputs.project-group == 'game' || inputs.project-group == 'shaders'
      working-directory: '${{inputs.branch}}/src'
      shell: bash
      run: sed -i 's/\/hl2 \/episodic/\/${{inputs.game}}/' create${{inputs.project-group}}projects.bat

    - name: Create project files
      working-directory: '${{inputs.branch}}/src'
      shell: cmd
      # https://github.com/ValveSoftware/source-sdk-2013/issues/72
      run: |
        reg add "HKLM\SOFTWARE\WOW6432Node\Microsoft\VisualStudio\10.0\Projects\{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}" /v DefaultProjectExtension /t REG_SZ /d vcproj /f
        create${{inputs.project-group}}projects.bat

      # --------------------------------------------------------------------

    - name: Build
      #if: steps.filter.outputs.game == 'true'
      working-directory: '${{inputs.branch}}/src'
      shell: cmd
      run: |
        devenv ${{inputs.solution-name}}.sln /upgrade
        msbuild -m -t:Rebuild -p:Configuration=${{inputs.configuration}};Platform=x86 ${{inputs.solution-name}}.sln

      # --------------------------------------------------------------------

    - name: Publish game binaries
      if: inputs.project-group == 'game' || inputs.project-group == 'shaders'
      uses: actions/upload-artifact@v4
      with:
        name: '${{inputs.project-group}}_${{inputs.game}}_win32_${{ inputs.configuration }}'
        path: |
          ${{inputs.branch}}/game/mod_${{inputs.game}}/bin/*.dll
        if-no-files-found: error

    - name: Publish map tools
      if: inputs.project-group == 'maptools'
      uses: actions/upload-artifact@v4
      with:
        name: '${{inputs.project-group}}_win32_${{ inputs.configuration }}'
        path: |
          ${{inputs.branch}}/game/bin/*.exe
          ${{inputs.branch}}/game/bin/*.dll
        if-no-files-found: error

    - name: Publish everything
      if: inputs.project-group == 'all'
      uses: actions/upload-artifact@v4
      with:
        name: 'everything_win32_${{ inputs.configuration }}'
        path: |
          ${{inputs.branch}}/game/bin
          ${{inputs.branch}}/game/mod_*/bin
        if-no-files-found: error

  build_ubuntu:
    if: inputs.build-on-linux == true && inputs.project-group != 'maptools' # No Linux map tools for now
    name: Ubuntu (GCC/G++)
    runs-on: ubuntu-latest
    env:
      config: ${{ inputs.configuration }}

    steps:
    - uses: actions/checkout@v3

    - name: Install GCC/G++ multilib
      run: |
        sudo apt-get update
        sudo apt-get install gcc-multilib g++-multilib

    - name: Pick game
      if: inputs.project-group == 'game' || inputs.project-group == 'shaders'
      working-directory: '${{inputs.branch}}/src'
      shell: bash
      run: sed -i 's/\/hl2 \/episodic/\/${{inputs.game}}/' create${{inputs.project-group}}projects

    - name: Set configuration
      working-directory: '${{inputs.branch}}/src'
      shell: bash
      run: |
        config=${{inputs.configuration}}
        export CFG=${config,,}
        echo "config=${CFG}" >> $GITHUB_ENV

    - name: Create project files
      working-directory: '${{inputs.branch}}/src'
      run: ./create${{inputs.project-group}}projects

      # --------------------------------------------------------------------

    - name: Build
      working-directory: '${{inputs.branch}}/src'
      run: make CFG=${{env.config}} -f ${{inputs.solution-name}}.mak

      # --------------------------------------------------------------------

    - name: Publish game binaries
      if: inputs.project-group == 'game' || inputs.project-group == 'shaders'
      uses: actions/upload-artifact@v4
      with:
        name: '${{inputs.project-group}}_${{inputs.game}}_linux32_${{ inputs.configuration }}'
        path: |
          ${{inputs.branch}}/game/mod_${{inputs.game}}/bin/*.so
          !${{inputs.branch}}/game/mod_${{inputs.game}}/bin/*_srv.so
        if-no-files-found: error

    #- name: Publish map tools
    #  if: inputs.project-group == 'maptools'
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: '${{inputs.project-group}}_linux32_${{ inputs.configuration }}'
    #    path: |
    #      ${{inputs.branch}}/game/bin/vbsp
    #      ${{inputs.branch}}/game/bin/vvis
    #      ${{inputs.branch}}/game/bin/vvis_dll.so
    #      ${{inputs.branch}}/game/bin/vrad
    #      ${{inputs.branch}}/game/bin/vrad_dll.so
    #    if-no-files-found: error

    # For now, don't publish the .dbg files even though we publish .pdb files on Windows
    # (they're too big)
    - name: Publish everything
      if: inputs.project-group == 'all'
      uses: actions/upload-artifact@v4
      with:
        name: 'everything_linux32_${{ inputs.configuration }}'
        path: |
          ${{inputs.branch}}/game/bin/*.so
          !${{inputs.branch}}/game/bin/*_srv.so
          ${{inputs.branch}}/game/mod_*/bin/*.so
          !${{inputs.branch}}/game/mod_*/bin/*_srv.so
        if-no-files-found: error
